package vo

import (
	"bepaid/enums"
	"time"
)

type PaymentRequest struct {

	//стоимость в минимальных денежных единицах.
	//Например, $32.45 должна быть отправлена как 3245
	Amount int64 `json:"amount"`

	//валюта в ISO-4217 формате, например USD
	Currency string `json:"currency"`

	//описание заказа. Максимальная длина: 255 символов
	Description string `json:"description"`

	//id транзакции или заказа в вашей системе.
	//Максимальная длина: 255 символов.
	//Пожалуйста, используйте уникальное значение для того, чтобы при запросе статуса транзакции получить актуальную информацию.
	//В противном случае вы получите первую найденную по tracking_id транзакцию
	TrackingId string `json:"tracking_id"`

	//(не обязательно) время в формате ISO 8601, до которого должна быть завершена операция.
	//По умолчанию - бессрочно.
	//Формат: YYYY-MM-DDThh:mm:ssTZD, где YYYY – год (например 2019), MM – месяц (например 02), DD – день (например 09), hh – часы (например 18), mm – минуты (например 20), ss – секунды (например 45), TZD – часовой пояс (+hh:mm или –hh:mm), например +03:00 для Минска.
	//Если в указанный момент платёж всё ещё не будет оплачен, он будет переведён в статус expired
	ExpiredAt time.Time `json:"expired_at"`

	//(необязательный) true или false.
	//Параметр управляет процессом проверки входящего запроса на уникальность.
	//Если в течение 30 секунд придет запрос на авторизацию с одинаковыми amount и number или token, то запрос будет отклонен.
	//По умолчанию, этот параметр имеет значение true
	DuplicationCheck bool `json:"duplication_check"`

	//(необязательный) динамический идентификатор платежа
	DynamicBillingDescriptor string `json:"dynamic_billing_descriptor"`

	//(необязательный) язык вашей страницы оформления заказа.
	//Если параметр установлен и email уведомление о транзакции включено, то bePaid отправит email, язык текста которого будет language.
	//По умолчанию - en. Допустимые значения: language.go
	Language enums.Language `json:"language"`

	//(необязательный) URL, на который будут приходить уведомления.
	//Формат запроса на подтверждение аналогичен формату ответа транзакции
	NotificationUrl string `json:"notification_url"`

	//(необязательный) URL, на который будут приходить запрос на подтверждение транзакции.
	//Формат запроса уведомления аналогичен формату ответа транзакции
	VerificationUrl string `json:"verification_url"`

	//параметр обязателен, если 3-D Secure включен.
	//Обратитесь к менеджеру за информацией.
	//return_url - это URL на стороне торговца, на который
	//bePaid будет перенаправлять клиента после возврата с 3-D Secure проверки
	ReturnUrl string `json:"return_url"`

	//true или false. Транзакция будет тестовой, если значение true.
	Test bool `json:"test"`

	CreditCard CreditCard `json:"credit_card"`

	// опционально
	// секция для настройки схемы обработки транзакций с проверкой 3-D Secure 2.0 с расширенным контролем
	ThreeDSecure struct {
		//advanced 	boolean.
		// Установите значение true, чтобы обрабатывать платежи по схеме с расширенным контролем. Иначе, установите false.
		Advanced bool `json:"advanced"`
	} `json:"three_d_secure"`

	// секция, содержащая дополнительную информацию о платеже
	AdditionalData struct {

		//секция для работы с AFT операциями
		P2P struct {
			// условно опционально
			// значение параметра уточните у вашего менеджера
			ServiceId string
			//условно опционально
			//значение параметра уточните у вашего менеджера
			ServiceExtension string
		}

		//массив для работы с каскадными платежами
		ExcludedGateways []string

		//секция для работы с сервисом Masterpass
		Masterpass struct {

			//секция для параметров Masterpass
			Params struct {

				//id пользовательской сессии
				Session string
			}
		}

		//секция, содержащая детальную информацию о бренде кредитной карты
		SubBrand struct {

			//название кобренда. Допустимые значения: halva
			Brand string

			//true - использовать бонусные баллы, false - не использовать бонусные баллы. Параметр характерен для brand со значение halva
			UsePoints bool
		}

		//текст, который будет добавлен в письмо клиенту. Должен быть представлен как массив строк: ["Первая строка", "Вторая строка"]
		ReceiptText string

		//массив, элементами которого могут быть параметры:
		//recurring - bePaid вернет токен карты для осуществления последующих платежей без повторного ввода реквизитов карты. Пользователь, соглашаясь с условиями регулярного списания, единожды производит оплату, вводя реквизиты карты, включая проверочный код карты CVC/CVV и проходя авторизацию по протоколу 3-D ­Secure.
		//oneclick - bePaid вернет токен карты для осуществления последующих платежей по схеме oneclick, когда на странице оплаты будут уже частично заполнены реквизиты карты, а пользователю для завершения оплаты достаточно ввести проверочный код карты CVC/CVV и пройти авторизацию по протоколу 3-D ­Secure.
		//credit - bePaid вернет токен карты для осуществления операций выплата средств и перевод средств
		//card_on_file - bePaid вернет токен карты, чтобы сохранить ее на профайле пользователя в вашем сервисе или приложении, и использовать этот токен для последующих операций по снятию денег с карты за оказанные услуги или проданны товары. Ознакомьтесть ниже с секцией card_on_file, чтобы узнать какие есть сценарии использования данного значения. Опция card_on_file в операции Оплата работает не со всеми эквайерами. Если вы хотите использовать card_on_file, свяжитесь со своим аккаунт менеджером.
		Contract []string

		//AVS/CVC проверка
		//json: avs_cvc_verification
		AvsCvcVerification string

		//card_on_file
		//(необязательный) данная секция устанавливает атрибуты операции, которые будут отправлены в дальнейшем в платёжную систему и которые. Если секция не передана, то будут использованы значения по умолчанию для initiator и type.
		CardOnFile struct {
			//merchant - (поумолчанию) операция инициирована вашей системой или приложением (например, оплата за поездку в такси)
			//customer - операция инициирована клиентом (например, клиент сам нажал кнопку оплатить сохраненной картой в вашем приложении)
			Initiator string `json:"initiator"`

			//используется только если additional_data.card_on_file.initiator имеет значение merchant.
			//delayed_charge - (поумолчанию) отложенная оплата (например, за оказанную услугу)
			//increment - досписание суммы (например, при допродаже товара или замене на более дорогой товар)
			//resubmission - повторная попытка списать деньги из-за предыдущего отказа в операции (например, не было денег на карте)
			//reauthorization - обновление авторизации (например, нужно перезаблокировать деньги на карте в связи с истечением срока авторизации предыдущей операции)
			//no_show - клиент не пришел (например, не заехал в отель)
			Type string `json:"type"`
		} `json:"card_on_file"`

		Browser struct {
			//	browser 	Параметры из секции передаются только при использовании 3DS 2.0
			//accept_header 	Содержание HTTP-заголовка Accept запроса от браузера держателя карты
			//screen_width 	Ширина экрана в пикселях. Соответствует параметру screen.width из JavaScript
			//screen_height 	Высота экрана в пикселях. Соответствует параметру screen.height из JavaScript
			//screen_color_depth 	Глубина цвета экрана в битах на пиксель. Соответствует параметру screen.colorDepth из JavaScript. Возможные значения:
			//
			//1 - 1 bit
			//4 - 4 bits
			//8 - 8 bits
			//15 - 15 bits
			//16 - 16 bits
			//24 - 24 bits
			//32 - 32 bits
			//48 - 48 bits
			//window_width 	Размер окна браузера по горизонтали в пикселях. Соответствует параметру document.body.clientWidth из JavaScript
			//window_height 	Размер окна браузера по вертикали в пикселях. Соответствует параметру document.body.clientHeight из JavaScript
			//language 	Язык навигатора. Соответствует параметру navigator.language из JavaScript
			//java_enabled 	Параметр показывает включен ли java в текущем браузере или нет. Соответствует параметру navigator.javaEnabled() из JavaScript
			//user_agent 	Строка агента пользователя текущего браузера. Соответствует параметру navigator.userAgent из JavaScript
			//time_zone 	Смещение часового пояса относительно часового пояса UTC в минутах для текущей локали. Соответствует параметру new Date().getTimezoneOffset() из JavaScript
		} `json:"browser"`
	} `json:"additional_data"`

	Customer Customer `json:"customer"`

	// (необязательный) узнайте у службы поддержки, должны ли вы отправлять эти данные
	BillingAddress BillingAddress `json:"billing_address"`

	//необязательная секция, предоставляющая расширенную информацию о продаже авиабилетов, туристических путевок и т.д.
	Travel map[string]any `json:"travel"`
}
