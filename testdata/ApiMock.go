// Code generated by MockGen. DO NOT EDIT.
// Source: Api.go

// Package testdata is a generated GoMock package.
package testdata

import (
	vo "bepaid-sdk/service/vo"
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockApi is a mock of Api interface.
type MockApi struct {
	ctrl     *gomock.Controller
	recorder *MockApiMockRecorder
}

// MockApiMockRecorder is the mock recorder for MockApi.
type MockApiMockRecorder struct {
	mock *MockApi
}

// NewMockApi creates a new mock instance.
func NewMockApi(ctrl *gomock.Controller) *MockApi {
	mock := &MockApi{ctrl: ctrl}
	mock.recorder = &MockApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApi) EXPECT() *MockApiMockRecorder {
	return m.recorder
}

// Authorization mocks base method.
func (m *MockApi) Authorization(ctx context.Context, authorization vo.AuthorizationRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorization", ctx, authorization)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorization indicates an expected call of Authorization.
func (mr *MockApiMockRecorder) Authorization(ctx, authorization interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorization", reflect.TypeOf((*MockApi)(nil).Authorization), ctx, authorization)
}

// Capture mocks base method.
func (m *MockApi) Capture(ctx context.Context, capture vo.CaptureRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Capture", ctx, capture)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Capture indicates an expected call of Capture.
func (mr *MockApiMockRecorder) Capture(ctx, capture interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capture", reflect.TypeOf((*MockApi)(nil).Capture), ctx, capture)
}

// Payment mocks base method.
func (m *MockApi) Payment(ctx context.Context, payment vo.PaymentRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Payment", ctx, payment)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Payment indicates an expected call of Payment.
func (mr *MockApiMockRecorder) Payment(ctx, payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payment", reflect.TypeOf((*MockApi)(nil).Payment), ctx, payment)
}

// Refund mocks base method.
func (m *MockApi) Refund(ctx context.Context, refund vo.RefundRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refund", ctx, refund)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refund indicates an expected call of Refund.
func (mr *MockApiMockRecorder) Refund(ctx, refund interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refund", reflect.TypeOf((*MockApi)(nil).Refund), ctx, refund)
}

// StatusByTrackingId mocks base method.
func (m *MockApi) StatusByTrackingId(ctx context.Context, trackingId string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusByTrackingId", ctx, trackingId)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatusByTrackingId indicates an expected call of StatusByTrackingId.
func (mr *MockApiMockRecorder) StatusByTrackingId(ctx, trackingId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusByTrackingId", reflect.TypeOf((*MockApi)(nil).StatusByTrackingId), ctx, trackingId)
}

// StatusByUid mocks base method.
func (m *MockApi) StatusByUid(ctx context.Context, uid string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusByUid", ctx, uid)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatusByUid indicates an expected call of StatusByUid.
func (mr *MockApiMockRecorder) StatusByUid(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusByUid", reflect.TypeOf((*MockApi)(nil).StatusByUid), ctx, uid)
}

// Void mocks base method.
func (m *MockApi) Void(ctx context.Context, void vo.VoidRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Void", ctx, void)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Void indicates an expected call of Void.
func (mr *MockApiMockRecorder) Void(ctx, void interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Void", reflect.TypeOf((*MockApi)(nil).Void), ctx, void)
}
